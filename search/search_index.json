{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Digital Embryo \u2014 Bioinformatics Command-Line Tutorial","text":"<p>Welcome to the Digital Embryo bioinformatics tutorial! This hands-on course will take you from command-line basics to analyzing real RNA-seq data.</p>"},{"location":"#learning-path","title":"Learning Path","text":"<pre><code>graph TD\n    A[Module 0: Setup &amp; Environment] --&gt; B[Module 1: Navigation &amp; Files]\n    B --&gt; C[Module 2: Pipes &amp; Data Wrangling]\n    C --&gt; D[Module 3: Process Management]\n    D --&gt; E[Module 4: Editing &amp; Compression]\n    E --&gt; F[Module 5: RNA-seq Primer]\n    F --&gt; G[Module 6: FASTQ Analysis]\n    G --&gt; H[Module 7: Conda &amp; QC Tools]\n    H --&gt; I[Module 8: Download Real Data]\n    I --&gt; J[Module 9: View-Run-View Loop]\n    J --&gt; K[Module 10: Capstone Script]\n\n    style A fill:#e1f5fe\n    style K fill:#c8e6c9\n    style F fill:#fff3e0</code></pre>"},{"location":"#course-philosophy","title":"Course Philosophy","text":"<p>Type it, don't paste it</p> <p>This tutorial emphasizes muscle memory. Type commands first, then copy/paste to check your work. Your future self will thank you.</p> <p>Look before you loop</p> <p>Always examine data with <code>head</code>, <code>tail</code>, <code>less</code>, or <code>zless</code> before writing scripts that process many files.</p> <p>Help first, experiment second</p> <p>Always run <code>command --help</code> (or <code>man command</code>) the first time you encounter a new tool. Understanding the options saves time and prevents mistakes.</p>"},{"location":"#what-youll-learn","title":"What You'll Learn","text":"<ul> <li>Command-line fundamentals: navigation, file operations, text processing</li> <li>Data wrangling: pipes, redirects, grep, awk, and cut</li> <li>Process management: background jobs, monitoring, and safe termination</li> <li>Bioinformatics tools: conda environments, FastQC, MultiQC, seqtk</li> <li>Real data analysis: downloading from SRA/ENA, quality control workflows</li> <li>Scripting: building robust, reusable analysis scripts</li> </ul>"},{"location":"#prerequisites","title":"Prerequisites","text":"<ul> <li>A computer with WSL2 (Windows), Terminal (macOS), or Linux</li> <li>VS Code (recommended)</li> <li>Willingness to type commands and learn by doing</li> </ul>"},{"location":"#time-commitment","title":"Time Commitment","text":"<ul> <li>Total: ~8-10 hours</li> <li>Per module: 30-90 minutes</li> <li>Format: Self-paced with email exit tickets</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<ol> <li>Start with Module 0: Setup &amp; Expectations</li> <li>Keep the Cheat Sheet handy for quick reference</li> <li>Type commands first, copy/paste second</li> <li>Submit exit tickets as you complete each module</li> </ol> <p>Ready to begin? Let's build those command-line skills! \ud83e\uddec</p>"},{"location":"cheatsheet/","title":"Digital Embryo \u2014 Command-Line One-Pager","text":"<p>Type it, don't paste it. You're building muscle memory you'll use all year.</p>"},{"location":"cheatsheet/#must-know-keys","title":"Must-know keys","text":"<ul> <li>Tab = autocomplete (double-Tab to list); \u2191/\u2193 = history</li> <li>Ctrl-r = reverse search history; Ctrl-a/e = start/end of line</li> <li>Ctrl-u/k = delete to start/end; Ctrl-c = interrupt; Ctrl-z = suspend</li> </ul>"},{"location":"cheatsheet/#files-navigation","title":"Files &amp; navigation","text":"<pre><code>pwd                        # where am I?\nls -lah                    # list (long, all, human sizes)\ncd -                       # jump back\nmkdir -p path/to/dir       # make nested dirs\ncp src dst; mv old new     # copy / move\nrm -i file                 # safer remove (interactive)\nfind . -name \"*.fastq.gz\"  # find files by name\ndu -sh ./*                 # folder sizes (human)\n</code></pre>"},{"location":"cheatsheet/#viewing-text-fast","title":"Viewing text fast","text":"<pre><code>less file                  # space=next page, /pattern, n=next, q=quit\nhead -n 20 file            # first 20 lines\ntail -n 20 file            # last 20 lines\nwc -l file                 # line count\ncolumn -t -s $'\\t' file    # pretty-print TSV\n</code></pre>"},{"location":"cheatsheet/#pipes-redirects-subshells","title":"Pipes, redirects, subshells","text":"<pre><code>cmd1 | cmd2                # pipe\ncmd &gt; out.txt              # overwrite\ncmd &gt;&gt; out.txt             # append\ncmd 2&gt; err.txt             # stderr only\necho \"size: $(du -sh . | cut -f1)\"  # command substitution\ntee out.txt                # write to file AND stdout\n</code></pre> <p>Example: top 10 extensions in a tree</p> <pre><code>find . -type f | sed 's/.*\\.//' | sort | uniq -c | sort -nr | head -10\n</code></pre>"},{"location":"cheatsheet/#grep-cut-awk-mini-cookbook","title":"grep / cut / awk mini-cookbook","text":"<pre><code>grep -E $'\\tA07\\t' grades.tsv                 # rows with assignment A07 (TSV)\ncut -f1,4-7 grades.tsv | head                 # pick columns\nawk -F '\\t' '$7==\"B\"{sum[$1]+=$5/$6} END{for(s in sum) printf \"%s\\t%.3f\\n\", s, sum[s]}' grades.tsv \\\n  | sort -k2,2nr | head -10 | column -t\n# ^ top 10 students by total percent in section B\nawk -F '\\t' '$4==\"A07\"{print $5}' grades.tsv | sort -n | awk 'NR%2{a=$1;next} {print (a+$1)/2}' # median (even/odd hack)\nawk -F '\\t' '$5==$6{print $1}' grades.tsv | sort -u | wc -l    # students with 100% on any assignment\n</code></pre>"},{"location":"cheatsheet/#processes-spot-juggle-stop","title":"Processes (spot, juggle, stop)","text":"<pre><code>yes &gt; /dev/null &amp;          # start background noise\njobs; fg %1; bg %1         # manage jobs\nps aux | grep yes          # find PID(s)\nkill &lt;PID&gt;                 # polite stop (SIGTERM)\nkill -9 &lt;PID&gt;              # last resort\npkill yes                  # kill by name (careful)\ntop / htop / pstree -p     # watch processes\ndisown %1                  # detach job from shell\n</code></pre>"},{"location":"cheatsheet/#compression-checksums","title":"Compression &amp; checksums","text":"<pre><code>gzip file                  # -&gt; file.gz\nzless file.gz              # view without extracting\nzcat file.gz | head -n 8   # peek first 8 lines\nsha256sum file.gz &gt; file.gz.sha256\nsha256sum -c file.gz.sha256\n</code></pre>"},{"location":"cheatsheet/#condamamba-miniforge","title":"Conda/Mamba (Miniforge)","text":"<pre><code># one-time install: see Module 7\nconda create -y -n rnaseq101 -c conda-forge -c bioconda fastqc multiqc seqtk\nconda activate rnaseq101\nconda env export --from-history &gt; rnaseq101.yml\n</code></pre>"},{"location":"cheatsheet/#fastq-quick-math","title":"FASTQ quick math","text":"<pre><code># reads = lines / 4\nawk 'END{print NR/4}' sample.fastq\n\n# longest read length\nawk 'NR%4==2{ if(length($0)&gt;m) m=length($0) } END{ print m }' sample.fastq\n\n# GC% of first N reads (N=1000)\nN=1000\nawk -v N=\"$N\" 'NR%4==2{seq=$0; gsub(/[^GgCc]/,\"\",seq); gc+=length(seq); bp+=length($0); n++; if(n==N) exit}\n               END{ if(bp) printf(\"%.2f\\n\",100*gc/bp); else print 0 }' sample.fastq\n</code></pre>"},{"location":"cheatsheet/#wsl2-windows-quick-notes","title":"WSL2 (Windows) quick notes","text":"<pre><code>wsl --install                 # install WSL + Ubuntu\nwsl -l -v                     # show distros/versions (ensure version 2)\n</code></pre> <p>Launch Ubuntu from Start, then open VS Code \u2192 \"WSL: Connect to WSL\".</p> <p>From WSL, <code>explorer.exe .</code> opens File Explorer at the current Linux folder.</p>"},{"location":"cheatsheet/#sanity-checks-before-scripts","title":"Sanity checks before scripts","text":"<ul> <li>Look before you loop: <code>head</code>, <code>tail</code>, <code>less</code>, <code>zless</code>.</li> <li>Confirm record structure (FASTQ 4-line).</li> <li>Verify checksums after big downloads.</li> <li>Start with tiny subsets (<code>seqtk sample</code>) and scale up.</li> </ul>"},{"location":"modules/00-setup/","title":"Module 0 \u2014 Setup &amp; Expectations (Local-Only)","text":"<p>Time: 30\u201345 min Goal: Be ready to type, save, and run commands locally. Windows users will use WSL2 + Ubuntu. Exit ticket (email me): a screenshot of your VS Code terminal and one sentence confirming you submitted your Alliance account request.</p> <p>Type it, don't paste it</p> <p>For this tutorial, type commands first. Copy/paste only to check your work afterward. Your brain will thank you in month 3.</p>"},{"location":"modules/00-setup/#1-editor-terminal","title":"1) Editor + terminal","text":"Windows (WSL2)macOSLinux <p>Open PowerShell as Administrator, then install WSL + Ubuntu:</p> <pre><code>wsl --install\n</code></pre> <p>If prompted, pick Ubuntu 22.04 LTS. Reboot if asked.</p> <p>After reboot, launch Ubuntu from the Start menu; create your Linux username/password.</p> <p>Verify WSL2:</p> <pre><code>wsl -l -v\n</code></pre> <p>If needed:</p> <pre><code>wsl --set-default-version 2\n</code></pre> <p>Install VS Code (Windows). In VS Code, install the extensions:</p> <ul> <li>WSL (Microsoft)</li> <li>Remote - SSH (Microsoft) (for later)</li> </ul> <p>Open VS Code \u2192 Ctrl+Shift+P \u2192 \"WSL: Connect to WSL\".</p> <p>In VS Code (WSL), open a terminal (Ctrl+`) and run:</p> <pre><code>echo $SHELL\nbash --version\n</code></pre> <p>Use the built-in Terminal (or iTerm2).</p> <p>Install VS Code (Mac).</p> <p>In VS Code, open the integrated terminal (Ctrl+<code>/ Cmd+</code>).</p> <p>macOS defaults to zsh. That's fine\u2014these lessons work the same. If you prefer bash:</p> <pre><code>bash\n</code></pre> <p>Use your distro's terminal and install VS Code if desired. You're good to go.</p>"},{"location":"modules/00-setup/#2-keyboard-habits-do-these-now","title":"2) Keyboard habits (do these now)","text":"<ul> <li>Tab to autocomplete; double-Tab to see suggestions.</li> <li>\u2191/\u2193 to cycle history; Ctrl-r for reverse search; Ctrl-a/e to jump to start/end; Ctrl-u/k to cut line.</li> </ul> <p>Try it:</p> <pre><code>mkdi&lt;Tab&gt;    # should complete to mkdir\n</code></pre>"},{"location":"modules/00-setup/#3-create-your-workspace","title":"3) Create your workspace","text":"<pre><code>mkdir -p ~/de-onramp/{lesson1,lesson2,assets} &amp;&amp; cd ~/de-onramp &amp;&amp; pwd\nls -lah\n</code></pre>"},{"location":"modules/00-setup/#4-request-your-allianceccdb-account-do-now","title":"4) Request your Alliance/CCDB account (do now)","text":"<p>Go to https://ccdb.computecanada.ca \u2192 Register.</p> <ul> <li>Role: Sponsored Student / Group Member.</li> <li>Sponsor/group: def-srussell (you'll be approved under Dr. Russell's group).</li> <li>Use your institutional email. Save your username.</li> </ul> <p>You won't use the cluster yet. This just avoids delays later.</p>"},{"location":"modules/00-setup/#5-exit-ticket-email","title":"5) Exit Ticket (email)","text":"<p>Subject: DE M0 Exit Ticket \u2013  Attach: screenshot of VS Code terminal. Message: \"I submitted my Alliance request on .\""},{"location":"modules/01-navigation-files/","title":"Module 1 \u2014 Navigation &amp; Files","text":"<p>Time: ~60 min Goal: Move confidently; preview text with less/head/tail/wc; get comfortable with paths and globs. Exit ticket (email me): paste the 3 commands you used for the treasure hunt + their outputs.</p> <p>What you'll learn</p> <ul> <li>Paths: absolute vs relative; ~, ., ..</li> <li>Commands: pwd, ls -lah, cd, mkdir -p, touch, cp, mv, rm -i</li> <li>Viewers: less, head, tail, wc</li> <li>Globbing and quoting</li> </ul>"},{"location":"modules/01-navigation-files/#1-warm-up-workspace","title":"1) Warm-up workspace","text":"<pre><code>cd ~/de-onramp/lesson1\npwd\n</code></pre>"},{"location":"modules/01-navigation-files/#2-paths-moving-around","title":"2) Paths &amp; moving around","text":"<pre><code>pwd                      # print working directory\nmkdir -p demo/a/b &amp;&amp; cd demo/a/b\npwd\ncd ..                    # up one\ncd -                     # jump back\n</code></pre>"},{"location":"modules/01-navigation-files/#3-listing-sizes","title":"3) Listing &amp; sizes","text":"<pre><code>ls\nls -lah                  # long list, human-readable sizes, include hidden\n</code></pre>"},{"location":"modules/01-navigation-files/#4-make-copy-move-remove-safely","title":"4) Make, copy, move, remove (safely)","text":"<pre><code>touch notes.txt\ncp notes.txt notes_copy.txt\nmv notes_copy.txt notes_renamed.txt\nrm -i notes_renamed.txt  # -i = interactive (safer)\n</code></pre>"},{"location":"modules/01-navigation-files/#5-view-text-quickly","title":"5) View text quickly","text":"<pre><code>echo -e \"line1\\nline2\\nline3\" &gt; tiny.txt\nless tiny.txt            # space=next page, /pattern, n=next, q=quit\nhead -n 2 tiny.txt\ntail -n 1 tiny.txt\nwc -l tiny.txt\n</code></pre> <p>Tab completion &amp; friends</p> <ul> <li>Tab completes filenames and commands.</li> <li>Double-Tab shows all matches.</li> <li>Ctrl-r searches your command history (type part of a command, hit Enter to run).</li> </ul>"},{"location":"modules/01-navigation-files/#6-treasure-hunt-type-it","title":"6) Treasure hunt (type it!)","text":"<p>Create some fake files:</p> <pre><code>mkdir -p sandbox/{data,logs,results}\ntouch sandbox/data/sample_{A,B,C}.fastq.gz\ntouch sandbox/logs/{run1.log,run2.log,notes.md}\ntouch sandbox/results/{out.txt,summary.tsv}\n</code></pre> <p>Challenges:</p> <ol> <li> <p>Find every <code>*.fastq*</code> under <code>sandbox/</code> and show their sizes (human-readable).</p> </li> <li> <p>Count how many files are in <code>sandbox/logs</code>.</p> </li> <li> <p>Print full paths of everything in <code>sandbox/results</code>.</p> </li> </ol> <p>(Hints: find, globs like <code>**/*.fastq*</code>, du -h, wc -l, realpath.)</p>"},{"location":"modules/01-navigation-files/#7-common-gotchas","title":"7) Common gotchas","text":"<ul> <li>Spaces in path? Quote it: <code>cd \"My Folder\"</code>.</li> <li><code>rm</code> is forever\u2014use <code>-i</code> while learning.</li> <li>If <code>less</code> looks weird, press <code>q</code> then reopen with <code>-S</code> to disable line wrapping.</li> </ul>"},{"location":"modules/01-navigation-files/#8-exit-ticket-email","title":"8) Exit Ticket (email)","text":"<p>Subject: DE M1 Exit Ticket \u2013  Paste: <ul> <li>The 3 commands you used for the treasure hunt.</li> <li>The outputs (copy as text).</li> </ul>"},{"location":"modules/02-pipes-tsv/","title":"Module 2 \u2014 Pipes, Redirects &amp; a TSV Search Lab","text":"<p>Time: 75 min Goal: Chain commands and do real data wrangling on a large tab-separated file. Exit ticket (email me): your three one-liners + their answers.</p> <p>Key ideas</p> <ul> <li>Glue tools with | (pipes)</li> <li>Save/append with &gt; and &gt;&gt;; handle errors with 2&gt;</li> <li>Pick fields with cut/awk; search with grep -E</li> <li>Sort, count uniques, format columns</li> </ul>"},{"location":"modules/02-pipes-tsv/#1-create-a-working-folder","title":"1) Create a working folder","text":"<pre><code>mkdir -p ~/de-onramp/lesson2 &amp;&amp; cd ~/de-onramp/lesson2\n</code></pre>"},{"location":"modules/02-pipes-tsv/#2-generate-a-big-tsv-locally-10k-rows","title":"2) Generate a big TSV locally (10k rows)","text":"<p>We'll synthesize \"student grades\" so everyone has the same file.</p> <pre><code># If python3 is missing:\n=== \"Linux/WSL\"\n\n    ```bash\n    sudo apt update &amp;&amp; sudo apt install -y python3\n    ```\n\n=== \"macOS\"\n\n    Python 3 is usually pre-installed on macOS. If not, you can install it via Homebrew:\n\n    ```bash\n    brew install python3\n    ```\n\npython3 - &lt;&lt;'PY'\nimport random, string\nrandom.seed(42)\nfirst = [\"Ava\",\"Ben\",\"Cam\",\"Diya\",\"Eli\",\"Finn\",\"Gia\",\"Hao\",\"Ira\",\"Jae\",\"Kai\",\"Luz\",\"Mia\",\"Nia\",\"Oli\",\"Paz\",\"Raj\",\"Sol\",\"Tao\",\"Uma\",\"Vic\",\"Wes\",\"Xiu\",\"Yas\",\"Zoe\"]\nlast  = [\"Arden\",\"Bose\",\"Cho\",\"Diaz\",\"Evan\",\"Faro\",\"Gupta\",\"Hale\",\"Ivanov\",\"Jin\",\"Kim\",\"Lopez\",\"Mori\",\"Ng\",\"Omar\",\"Patel\",\"Quinn\",\"Reed\",\"Singh\",\"Trent\",\"Ueda\",\"Voss\",\"Wu\",\"Xu\",\"Young\",\"Zimmer\"]\nasg   = [f\"A{i:02d}\" for i in range(1,21)]\nprint(\"student_id\\tfirst\\tlast\\tassignment\\tscore\\tmax\\tsection\")\nfor _ in range(10000):\n    sid = \"S\" + \"\".join(random.choice(string.digits) for _ in range(6))\n    f = random.choice(first); l = random.choice(last); a = random.choice(asg)\n    mx = random.choice([10,20,50,100]); sc = random.randint(0,mx); sec = random.choice([\"A\",\"B\",\"C\"])\n    print(f\"{sid}\\t{f}\\t{l}\\t{a}\\t{sc}\\t{mx}\\t{sec}\")\nPY\n\n# Save to a file:\npython3 - &lt;&lt;'PY' &gt; grades.tsv\nimport random, string\nrandom.seed(42)\nfirst = [\"Ava\",\"Ben\",\"Cam\",\"Diya\",\"Eli\",\"Finn\",\"Gia\",\"Hao\",\"Ira\",\"Jae\",\"Kai\",\"Luz\",\"Mia\",\"Nia\",\"Oli\",\"Paz\",\"Raj\",\"Sol\",\"Tao\",\"Uma\",\"Vic\",\"Wes\",\"Xiu\",\"Yas\",\"Zoe\"]\nlast  = [\"Arden\",\"Bose\",\"Cho\",\"Diaz\",\"Evan\",\"Faro\",\"Gupta\",\"Hale\",\"Ivanov\",\"Jin\",\"Kim\",\"Lopez\",\"Mori\",\"Ng\",\"Omar\",\"Patel\",\"Quinn\",\"Reed\",\"Singh\",\"Trent\",\"Ueda\",\"Voss\",\"Wu\",\"Xu\",\"Young\",\"Zimmer\"]\nasg   = [f\"A{i:02d}\" for i in range(1,21)]\nprint(\"student_id\\tfirst\\tlast\\tassignment\\tscore\\tmax\\tsection\")\nfor _ in range(10000):\n    sid = \"S\" + \"\".join(random.choice(string.digits) for _ in range(6))\n    f = random.choice(first); l = random.choice(last); a = random.choice(asg)\n    mx = random.choice([10,20,50,100]); sc = random.randint(0,mx); sec = random.choice([\"A\",\"B\",\"C\"])\n    print(f\"{sid}\\t{f}\\t{l}\\t{a}\\t{sc}\\t{mx}\\t{sec}\")\nPY\n</code></pre> <p>Quick checks:</p> <pre><code>head -n 5 grades.tsv | column -t -s $'\\t'\nwc -l grades.tsv\n</code></pre> <p>Tabs vs spaces</p> <p>Many tools default to spaces. For a TSV, use <code>-s $'\\t'</code> with column and <code>cut -f</code>.</p>"},{"location":"modules/02-pipes-tsv/#3-pipes-redirects-in-5-minutes","title":"3) Pipes &amp; redirects in 5 minutes","text":"<pre><code>grep -E '^S[0-9]{6}' grades.tsv | head -n 3   # grep -E: search using extended regex; |: pipe output to next command\ncut -f1,4-7 grades.tsv | head -n 3            # cut -f: extract specific fields (columns)\ncut -f7 grades.tsv | sort | uniq -c | sort -nr # sort: sort lines; uniq -c: count unique lines; sort -nr: sort numerically, reverse\ngrep -E $'\\tA07\\t' grades.tsv | wc -l         # wc -l: count lines (useful for counting matches)\ngrep -E $'\\tA07\\t' grades.tsv &gt; a07.tsv       # &gt;: redirect stdout to a file (overwrites)\ngrep -E 'notfound' grades.tsv 2&gt; errors.log   # 2&gt;: redirect stderr to a file\n</code></pre>"},{"location":"modules/02-pipes-tsv/#4-one-liner-challenges-type-first-then-refine","title":"4) One-liner challenges (type first, then refine)","text":""},{"location":"modules/02-pipes-tsv/#top-10-students-by-total-percent-in-section-b","title":"Top 10 students by total percent in section B","text":"<p>Hint: group by student_id, sum score/max where section==\"B\", then sort desc. Tools: awk -F '\\t', associative arrays, sort -k2,2nr | head -10, column -t.</p>"},{"location":"modules/02-pipes-tsv/#median-score-for-assignment-a07-across-all-sections","title":"Median score for assignment A07 across all sections","text":"<p>Hint: filter rows where assignment==\"A07\", print score, sort numerically, pick the middle. Tools: awk, sort -n, maybe numfmt (optional).</p>"},{"location":"modules/02-pipes-tsv/#how-many-unique-students-scored-100-on-any-assignment","title":"How many unique students scored 100% on any assignment?","text":"<p>Hint: score == max \u2192 gather student_id \u2192 unique count. Tools: awk, sort -u | wc -l.</p> <p>Deliverables: paste each one-liner and its numeric/text answer.</p>"},{"location":"modules/02-pipes-tsv/#5-bonus-pretty-output","title":"5) Bonus: pretty output","text":"<p>Pipe to column:</p> <pre><code>... | column -t -s $'\\t'\n</code></pre>"},{"location":"modules/02-pipes-tsv/#6-exit-ticket-email","title":"6) Exit Ticket (email)","text":"<p>Subject: DE M2 Exit Ticket \u2013  Paste: <ul> <li>Your three one-liners (exact commands).</li> <li>The three answers (numbers / top 10 table).</li> </ul>"},{"location":"modules/03-processes/","title":"Module 3 \u2014 Processes &amp; Hung-Terminal Rescue","text":"<p>Time: 45\u201360 min Goal: Spot stuck jobs, stop them safely, and keep working.</p> <p>Type it, don't paste it</p> <p>For this module too: type each command once before you copy/paste.</p>"},{"location":"modules/03-processes/#1-foreground-vs-background","title":"1) Foreground vs background","text":"<p>Try these to feel the difference:</p> <pre><code># Foreground job (Ctrl-C to stop)\nsleep 10\n\n# Background job (&amp;)\nsleep 300 &amp;\njobs      # list shell jobs\n\n# Bring a job to foreground (replace %1 with your job number)\nfg %1\n\n# Suspend a foreground job then background it\nyes &gt; /dev/null\n# Press Ctrl-Z to suspend\nbg %1\njobs\n</code></pre>"},{"location":"modules/03-processes/#2-see-whats-running","title":"2) See what's running","text":"<p>Install a couple of helpers:</p> Linux/WSLmacOS <pre><code>sudo apt update &amp;&amp; sudo apt install -y htop psmisc\n</code></pre> <pre><code>brew install htop psmisc\n</code></pre> <p>Now inspect:</p> <pre><code>ps aux | head -n 5\nps aux | grep yes | grep -v grep\ntop           # q to quit\nhtop          # arrows to navigate, F10 to quit\npstree -p     # processes as a tree with PIDs\n</code></pre>"},{"location":"modules/03-processes/#3-stop-stuff-nicely-then-firmly","title":"3) Stop stuff (nicely, then firmly)","text":"<pre><code># Ask a process to terminate (SIGTERM)\nkill &lt;PID&gt;\n\n# If it ignores you, last resort (SIGKILL)\nkill -9 &lt;PID&gt;\n\n# Kill by name (careful; can match multiple)\npkill yes\n</code></pre> <p>Use kill -9 sparingly</p> <p><code>-9</code> skips cleanup. Try plain <code>kill</code> first to allow programs to close files gracefully.</p>"},{"location":"modules/03-processes/#4-practice-make-a-runaway-and-fix-it","title":"4) Practice: make a \"runaway\" and fix it","text":"<pre><code># Start a noisy CPU-waster in the background\nyes &gt; /dev/null &amp;\n# Find its PID, then terminate it:\nps aux | grep yes | grep -v grep\nkill &lt;PID&gt;        # try without -9 first\n</code></pre> <p>Bonus: start two background jobs and use <code>jobs</code>, <code>fg</code>, and <code>bg</code> to juggle them.</p>"},{"location":"modules/03-processes/#5-detach-from-the-shell-advanced-preview","title":"5) Detach from the shell (advanced preview)","text":"<pre><code># Disown a background job so it survives if the shell exits\nsleep 600 &amp;\ndisown %1\n</code></pre>"},{"location":"modules/03-processes/#exit-ticket-email","title":"Exit Ticket (email)","text":"<p>Subject: DE M3 Exit Ticket \u2013  Paste: <ul> <li>The commands you used to locate/kill your runaway, including the PID.</li> <li>One sentence about when you'd use <code>kill</code> vs <code>kill -9</code>.</li> </ul>"},{"location":"modules/04-editing-compression/","title":"Module 4 \u2014 Editing, Compression &amp; Checksums","text":"<p>Time: 45\u201360 min Goal: Make small edits safely, work with .gz, and verify files.</p> <p>Edit safely</p> <p>When learning, edit a copy. Keep originals read-only or backed up.</p>"},{"location":"modules/04-editing-compression/#1-nano-in-5-minutes","title":"1) nano in 5 minutes","text":"<p>Open a file:</p> <pre><code>cd ~/de-onramp/lesson1\necho -e \"line1\\nline2\\nline3\" &gt; notes.txt\nnano notes.txt\n</code></pre> <p>Cheat sheet inside nano:</p> <ul> <li>Ctrl-O write, Enter confirm; Ctrl-X exit.</li> <li>Ctrl-W search; Alt-W next match.</li> <li>Ctrl-K cut line; Ctrl-U paste.</li> </ul>"},{"location":"modules/04-editing-compression/#2-compress-preview-gz","title":"2) Compress &amp; preview .gz","text":"Linux/WSLmacOS <pre><code>echo \"some long text\" &gt; big.txt\ngzip big.txt           # creates big.txt.gz, removes original\nzless big.txt.gz       # view without decompressing\nzcat big.txt.gz | head\ngunzip big.txt.gz      # back to big.txt\n</code></pre> <p>Optional (faster parallel gzip):</p> <pre><code>sudo apt install -y pigz\npigz big.txt\n</code></pre> <pre><code>echo \"some long text\" &gt; big.txt\ngzip big.txt           # creates big.txt.gz, removes original\nzless big.txt.gz       # view without decompressing\ngzcat big.txt.gz | head  # gzcat instead of zcat on macOS\ngunzip big.txt.gz      # back to big.txt\n</code></pre> <p>Optional (faster parallel gzip):</p> <pre><code>brew install pigz\npigz big.txt\n</code></pre>"},{"location":"modules/04-editing-compression/#3-checksums-trust","title":"3) Checksums = trust","text":"Linux/WSLmacOS <pre><code>sha256sum big.txt &gt; big.txt.sha256\nsha256sum -c big.txt.sha256   # should say: OK\n</code></pre> <pre><code>shasum -a 256 big.txt &gt; big.txt.sha256\nshasum -a 256 -c big.txt.sha256   # should say: OK\n</code></pre> <p>Why this matters: when you download FASTQs, you can verify integrity against provided checksums before analysis.</p>"},{"location":"modules/04-editing-compression/#4-mini-lab","title":"4) Mini-lab","text":"<ol> <li>Make <code>sample.txt</code>, add two lines with nano.</li> <li>Compress to <code>sample.txt.gz</code>.</li> <li>Create and verify a sha256.</li> <li>Preview the compressed file with <code>zless</code>.</li> </ol>"},{"location":"modules/04-editing-compression/#exit-ticket-email","title":"Exit Ticket (email)","text":"<p>Subject: DE M4 Exit Ticket \u2013  Paste: <ul> <li>Your checksum verification output (<code>sha256sum -c</code> or <code>shasum -a 256 -c</code>), and two bullets on what you learned about .gz and checksums.</li> </ul>"},{"location":"modules/05-rnaseq-primer/","title":"Module 5 \u2014 RNA-seq Primer (Watch/Skim)","text":"<p>Time: 30\u201345 min Goal: Know the wet-lab \u2192 data flow so FASTQ lines make sense.</p> <p>Pick any 2\u20133 videos (watch at 1.25\u00d7 if you like)</p> <ul> <li>Gentle concept video: StatQuest: RNA-seq: Great intro to gene expression analysis by RNA sequencing</li> <li>Single Cell Sequencing - Eric Chow (UCSF): This one is mandatory!!</li> <li>Part I: What is next generation sequencing: This illumina page describes sequencing by synthesis, includes a video</li> <li>Part II: Intro to RNA-seq analysis: This is the first of several videos on RNA seq analysis (feel free to browse the others) </li> <li>EMBL-EBI \"Introduction to RNA-seq &amp; functional interpretation\": Full course materials + recordings to get a minor in RNA seq</li> </ul> <p>Core habit you'll use forever</p> <p>Look before you loop. For any new dataset or tool, skim raw inputs and outputs with <code>head</code>, <code>tail</code>, <code>less</code>, or <code>zless</code> before writing a script that blasts through many files.</p>"},{"location":"modules/05-rnaseq-primer/#rna-seq-workflow-overview","title":"RNA-seq Workflow Overview","text":"<pre><code>graph LR\n    A[RNA Sample] --&gt; B[Library Prep]\n    B --&gt; C[Sequencing]\n    C --&gt; D[FASTQ Files]\n    D --&gt; E[Quality Control]\n    E --&gt; F[Trimming/Filtering]\n    F --&gt; G[Alignment]\n    G --&gt; H[Quantification]\n    H --&gt; I[Differential Expression]\n\n    B1[Poly-A Selection&lt;br/&gt;or rRNA Depletion] --&gt; B\n    B2[Fragmentation] --&gt; B\n    B3[Adapter Ligation] --&gt; B\n\n    C1[Sequencing by Synthesis] --&gt; C\n    C2[Base Calling] --&gt; C\n    C3[Quality Scoring] --&gt; C\n\n    style D fill:#e3f2fd\n    style E fill:#fff3e0\n    style A fill:#f3e5f5</code></pre>"},{"location":"modules/05-rnaseq-primer/#what-to-notice-while-watching","title":"What to notice while watching","text":"<ul> <li>Where quality scores come from (fluorescence \u2192 base call \u2192 Phred).</li> <li>Why library prep choices (poly-A, rRNA depletion, UMIs) change what you see in FASTQ.</li> <li>Paired-end vs single-end expectations (R1/R2 roles).</li> </ul> <p>Optional references for later: SRA home &amp; Run Selector docs. NCBI, NCBI Insights</p>"},{"location":"modules/05-rnaseq-primer/#exit-ticket-email","title":"Exit Ticket (email)","text":"<p>Subject: DE M5 Exit Ticket \u2013  Paste: <p>Three bullets: (1) what a read's quality string represents, (2) one library-prep choice and its consequence, (3) why we \"look before we loop,\" in your own words.</p>"},{"location":"modules/06-fastq-101/","title":"Module 6 \u2014 FASTQ 101 (Hands-on)","text":"<p>Time: ~60 min Goal: Understand 4-line records, count reads safely, and compute simple stats.</p> <p>Type it, don't paste it</p> <p>This one is worth typing\u2014<code>head</code>, <code>wc</code>, <code>awk</code>, and <code>zcat</code>/<code>gzcat</code> will become muscle memory.</p>"},{"location":"modules/06-fastq-101/#1-fastq-anatomy-recap","title":"1) FASTQ anatomy (recap)","text":"<p>Each read = 4 lines:</p> <ol> <li>@ header (ID + metadata)</li> <li>Sequence (A/C/G/T/N)</li> <li>+ (optional header repeat)</li> <li>Quality string (ASCII characters encoding Phred scores)</li> </ol> <p>Good overview references from NCBI/EBI.</p>"},{"location":"modules/06-fastq-101/#2-make-a-tiny-fastq","title":"2) Make a tiny FASTQ","text":"<pre><code>mkdir -p ~/de-onramp/lesson3 &amp;&amp; cd ~/de-onramp/lesson3\ncat &gt; tiny.fq &lt;&lt; 'EOF'\n@r1\nACGTTGCA\n+\nIIIIHHHF\n@r2\nGGGTTTAA\n+\nFFFFFIII\nEOF\n</code></pre>"},{"location":"modules/06-fastq-101/#3-sanity-checks-robust-counting","title":"3) Sanity checks (robust counting)","text":"<p>Avoid <code>grep '^@'</code> (the @ can appear in quality lines). Count records by lines \u00f7 4:</p> <pre><code>wc -l tiny.fq\n# If the last number is L, reads = L/4\nawk 'END{print NR/4}' tiny.fq\n</code></pre> <p>For gz files:</p> Linux/WSLmacOS <pre><code>gzip -c tiny.fq &gt; tiny.fq.gz\nzcat tiny.fq.gz | awk 'END{print NR/4}'\n</code></pre> <pre><code>gzip -c tiny.fq &gt; tiny.fq.gz\ngzcat tiny.fq.gz | awk 'END{print NR/4}'\n</code></pre>"},{"location":"modules/06-fastq-101/#4-peek-at-sequences-lengths","title":"4) Peek at sequences &amp; lengths","text":"<pre><code># Show the first two records (8 lines)\nhead -n 8 tiny.fq\n\n# Longest read length\nawk 'NR%4==2{ if(length($0)&gt;m) m=length($0) } END{ print m }' tiny.fq\n</code></pre>"},{"location":"modules/06-fastq-101/#5-quick-gc","title":"5) Quick GC%","text":"<p>GC% for the first N reads (e.g., 1000), falling back to all if fewer:</p> <pre><code>N=1000\nawk -v N=\"$N\" 'NR%4==2{\n  seq=$0; gc_seq=seq; gsub(/[^GgCc]/,\"\",gc_seq)\n  gc+=length(gc_seq); bp+=length(seq); n++\n  if(n==N) exit\n} END{ if(bp==0) print 0; else printf(\"%.2f\\n\", 100*gc/bp) }' tiny.fq\n</code></pre> <p>For gzipped input:</p> Linux/WSLmacOS <pre><code>zcat tiny.fq.gz | awk -v N=1000 'NR%4==2{ ...same body... }'\n</code></pre> <pre><code>gzcat tiny.fq.gz | awk -v N=1000 'NR%4==2{ ...same body... }'\n</code></pre>"},{"location":"modules/06-fastq-101/#6-quality-strings-concept-check","title":"6) Quality strings (concept check)","text":"<p>Quality characters map to Phred scores (usually Phred+33). You won't decode them by hand, but recognize: higher ASCII \u2192 higher quality. (We'll rely on fastqc/multiqc next to visualize.)</p> <p>EBI/NCBI format notes cover header &amp; quality conventions.</p>"},{"location":"modules/06-fastq-101/#7-mini-lab","title":"7) Mini-lab","text":"<ol> <li>Create <code>toy.fq</code> with 3 reads of different lengths.</li> <li>Count reads robustly (lines/4).</li> <li>Compute longest read length and GC% of first 3 reads.</li> <li>Write a one-sentence note: what would you look at in raw output before writing a processing loop?</li> </ol>"},{"location":"modules/06-fastq-101/#exit-ticket-email","title":"Exit Ticket (email)","text":"<p>Subject: DE M6 Exit Ticket \u2013  Paste: <ul> <li>Your read count, longest length, and GC% results.</li> <li>The one-sentence \"look before you loop\" habit, in your own words.</li> </ul>"},{"location":"modules/07-env-qc/","title":"Module 7 \u2014 Local Env + Tiny QC","text":"<p>Time: 60\u201375 min Goal: Create a clean Conda/Mamba env and run seqtk, fastqc, and multiqc locally.</p> <p>Type it, don't paste it</p> <p>Muscle memory now = speed later. Please type once before copy/paste.</p>"},{"location":"modules/07-env-qc/#1-install-miniforgemambaforge","title":"1) Install Miniforge/Mambaforge","text":"<p>Bioinformatics often requires many specialized tools, and managing their dependencies can be tricky. Conda (and its faster alternative, Mamba) helps create isolated environments for these tools, preventing conflicts and making your analyses reproducible. Mambaforge is a distribution that includes Mamba and Conda.</p> Windows (WSL2 Ubuntu)macOS (Apple Silicon)macOS (Intel) <pre><code>cd ~\nwget https://github.com/conda-forge/miniforge/releases/latest/download/Mambaforge-Linux-x86_64.sh\nbash Mambaforge-Linux-x86_64.sh -b -p $HOME/mambaforge\n# This line sets up your shell to use conda/mamba commands\neval \"$($HOME/mambaforge/bin/conda shell.bash hook)\"\nconda config --set auto_activate_base false\n</code></pre> <pre><code>cd ~\n# Use -L to follow redirects and a specific version for stability\ncurl -L -O https://github.com/conda-forge/miniforge/releases/download/24.7.1-0/Mambaforge-MacOSX-arm64.sh\n# Verify the downloaded file is a shell script before running\nfile Mambaforge-MacOSX-arm64.sh\nbash Mambaforge-MacOSX-arm64.sh -b -p $HOME/mambaforge\n# This line sets up your shell to use conda/mamba commands\neval \"$($HOME/mambaforge/bin/conda shell.zsh hook)\"  # or bash if you use bash\nconda config --set auto_activate_base false\n</code></pre> <pre><code>cd ~\n# Use -L to follow redirects and a specific version for stability\ncurl -L -O https://github.com/conda-forge/miniforge/releases/download/24.7.1-0/Mambaforge-MacOSX-x86_64.sh\n# Verify the downloaded file is a shell script before running\nfile Mambaforge-MacOSX-x86_64.sh\nbash Mambaforge-MacOSX-x86_64.sh -b -p $HOME/mambaforge\n# This line sets up your shell to use conda/mamba commands\neval \"$($HOME/mambaforge/bin/conda shell.zsh hook)\"\nconda config --set auto_activate_base false\n</code></pre>"},{"location":"modules/07-env-qc/#2-make-the-env","title":"2) Make the env","text":"<pre><code>conda create -y -n rnaseq101 -c conda-forge -c bioconda fastqc multiqc seqtk\nconda activate rnaseq101\n</code></pre>"},{"location":"modules/07-env-qc/#3-prepare-a-tiny-fastq-and-downsample","title":"3) Prepare a tiny FASTQ and downsample","text":"<pre><code>mkdir -p ~/de-onramp/lesson4 &amp;&amp; cd ~/de-onramp/lesson4\ncat &gt; toy.fq &lt;&lt; 'EOF'\n@r1\nACGTTGCA\n+\nIIIIHHHF\n@r2\nGGGTTTAA\n+\nFFFFFIII\n@r3\nACGTACGT\n+\nIIIIIIII\nEOF\n\n# Downsample \"reads\" (works better on real data but fine for demo)\nseqtk sample -s 1 toy.fq 1.0 &gt; toy.sub.fq\n</code></pre>"},{"location":"modules/07-env-qc/#4-run-fastqc-multiqc","title":"4) Run FastQC + MultiQC","text":"<pre><code>fastqc -o qc toy.fq toy.sub.fq\nmultiqc -o qc qc\n</code></pre> <p>Open <code>qc/multiqc_report.html</code> locally (VS Code file explorer \u2192 click to open in your default browser).</p>"},{"location":"modules/07-env-qc/#exit-ticket-email","title":"Exit Ticket (email)","text":"<p>Subject: DE M7 Exit Ticket \u2013  Paste: <ul> <li>Output of <code>conda list | grep -E 'fastqc|multiqc|seqtk'</code></li> <li>Two bullets from your MultiQC report (e.g., per-base quality and GC content).</li> </ul>"},{"location":"modules/08-pull-one-srr/","title":"Module 8 \u2014 Pull One Single-Cell FASTQ (Public SRA/ENA)","text":"<p>Time: 60\u201390 min Goal: Find a study, choose one small run, download the FASTQ via HTTPS, and verify it.</p> <p>What you'll practice</p> <ul> <li>Navigating SRA (Study \u2192 Sample \u2192 Experiment \u2192 Run (SRR))</li> <li>Using the Run Selector to find a small run</li> <li>Grabbing direct ENA HTTPS links for FASTQ</li> <li>Resumable downloads and checksums</li> </ul>"},{"location":"modules/08-pull-one-srr/#1-pick-a-study","title":"1) Pick a study","text":"<p>Use a classic human single-cell embryo dataset such as SRP011546 (GEO GSE36552). Open the Run Selector for the study. Sort by size/spots and pick a small SRR.</p> <p>Tip</p> <p>If your choice is still large, that's okay\u2014download just one file and downsample in the next module.</p>"},{"location":"modules/08-pull-one-srr/#2-get-the-direct-fastq-url","title":"2) Get the direct FASTQ URL","text":"<p>From the SRR page, follow the ENA / EBI link. On the ENA run page, copy an HTTPS FASTQ link (R1 or single-end).</p>"},{"location":"modules/08-pull-one-srr/#3-download-resumable-and-verify","title":"3) Download (resumable) and verify","text":"Linux/WSLmacOS <pre><code>mkdir -p ~/de-onramp/lesson5/data &amp;&amp; cd ~/de-onramp/lesson5/data\n\n# Replace with your URL:\nwget -c \"https://.../SRRxxxxxxx.fastq.gz\" -O SRR.fastq.gz\n\n# Optional: if ENA provides checksums, verify; otherwise compute your own\nsha256sum SRR.fastq.gz &gt; SRR.fastq.gz.sha256\nsha256sum -c SRR.fastq.gz.sha256\n\n# Sanity peek (don't expand the whole file!):\nzcat SRR.fastq.gz | head -n 8\n</code></pre> <pre><code>mkdir -p ~/de-onramp/lesson5/data &amp;&amp; cd ~/de-onramp/lesson5/data\n\n# Replace with your URL:\nwget -c \"https://.../SRRxxxxxxx.fastq.gz\" -O SRR.fastq.gz\n\n# Optional: if ENA provides checksums, verify; otherwise compute your own\nshasum -a 256 SRR.fastq.gz &gt; SRR.fastq.gz.sha256\nshasum -a 256 -c SRR.fastq.gz.sha256\n\n# Sanity peek (don't expand the whole file!):\ngzcat SRR.fastq.gz | head -n 8\n</code></pre> <p>If the file is very large and <code>head</code> feels slow, use <code>pv</code> or <code>zcat</code>/<code>gzcat | head</code> as above (fast). If you need to stop, Ctrl-C and rerun <code>wget -c</code> later to resume.</p>"},{"location":"modules/08-pull-one-srr/#4-optional-keep-a-tiny-working-copy","title":"4) (Optional) Keep a tiny working copy","text":"<pre><code>conda activate rnaseq101\nseqtk sample -s 7 SRR.fastq.gz 10000 | gzip &gt; SRR.10k.fastq.gz   # ~10k reads\n</code></pre>"},{"location":"modules/08-pull-one-srr/#exit-ticket-email","title":"Exit Ticket (email)","text":"<p>Subject: DE M8 Exit Ticket \u2013  Paste: <ul> <li>The study accession and the SRR you chose</li> <li>Your exact <code>wget</code> command (with URL redacted if you prefer)</li> <li>File size (<code>ls -lh</code>) and the single line from checksum verification (<code>sha256sum -c</code> or <code>shasum -a 256 -c</code>)</li> </ul>"},{"location":"modules/09-view-run-view/","title":"Module 9 \u2014 The \"View \u2192 Run \u2192 View\" Loop (on a Real File)","text":"<p>Time: 60\u201375 min Goal: Practice the core habit on your downloaded FASTQ.</p> <p>Look before you loop</p> <p>For a new dataset, always skim raw inputs and tool outputs before writing scripts.</p>"},{"location":"modules/09-view-run-view/#the-view-run-view-workflow","title":"The View \u2192 Run \u2192 View Workflow","text":"<pre><code>graph TD\n    A[New Dataset] --&gt; B[View: head/tail/zless]\n    B --&gt; C[Understand Structure]\n    C --&gt; D[Run: FastQC/MultiQC]\n    D --&gt; E[View: Reports &amp; Logs]\n    E --&gt; F{Quality OK?}\n    F --&gt;|Yes| G[Proceed to Analysis]\n    F --&gt;|No| H[Adjust Parameters]\n    H --&gt; D\n    G --&gt; I[Document Findings]\n\n    style A fill:#e3f2fd\n    style B fill:#fff3e0\n    style D fill:#f3e5f5\n    style E fill:#fff3e0\n    style I fill:#e8f5e8</code></pre>"},{"location":"modules/09-view-run-view/#1-inspect-the-data","title":"1) Inspect the data","text":"Linux/WSLmacOS <pre><code>cd ~/de-onramp/lesson5/data\nzcat SRR.fastq.gz | head -n 8\nzcat SRR.fastq.gz | awk 'NR%4==2{r++; bp+=length($0)} END{print \"Reads:\",r,\"Bases:\",bp}'\n</code></pre> <p>If you made <code>SRR.10k.fastq.gz</code>, use that for speed:</p> <pre><code>zcat SRR.10k.fastq.gz | head -n 8\n</code></pre> <pre><code>cd ~/de-onramp/lesson5/data\ngzcat SRR.fastq.gz | head -n 8\ngzcat SRR.fastq.gz | awk 'NR%4==2{r++; bp+=length($0)} END{print \"Reads:\",r,\"Bases:\",bp}'\n</code></pre> <p>If you made <code>SRR.10k.fastq.gz</code>, use that for speed:</p> <pre><code>gzcat SRR.10k.fastq.gz | head -n 8\n</code></pre>"},{"location":"modules/09-view-run-view/#2-run-fastqc-multiqc","title":"2) Run FastQC + MultiQC","text":"<pre><code>mkdir -p ../qc &amp;&amp; cd ../qc\nfastqc ../data/SRR*.fastq.gz\nmultiqc .\n</code></pre> <p>Open <code>multiqc_report.html</code>. Note:</p> <ul> <li>Per-base quality profile</li> <li>GC distribution</li> <li>Overrepresented sequences / adapter content</li> <li>Sequence length distribution</li> </ul>"},{"location":"modules/09-view-run-view/#3-jot-a-mini-qc","title":"3) Jot a mini-QC","text":"<p>Create <code>../qc/notes.txt</code> with 4\u20135 bullets answering:</p> <ul> <li>Is quality high and uniform across cycles?</li> <li>Any adapters/overrepresented sequences?</li> <li>Paired vs single-end expectations met?</li> <li>What would you do next (trim? filter? align?)</li> </ul>"},{"location":"modules/09-view-run-view/#exit-ticket-email","title":"Exit Ticket (email)","text":"<p>Subject: DE M9 Exit Ticket \u2013  Paste: <ul> <li>5 bullets from your <code>notes.txt</code></li> <li>One MultiQC screenshot (per-base quality or GC)</li> </ul>"},{"location":"modules/10-capstone/","title":"Module 10 \u2014 Capstone: One-Command QC Script","text":"<p>Time: 60\u201390 min Goal: Write a robust script that down-samples (optional), runs fastqc and multiqc, and writes a text summary.</p> <p>What you'll submit</p> <ul> <li>Your script <code>run_qc.sh</code></li> <li>The <code>.out</code> summary it produces</li> <li>4\u20135 sentence reflection (what surprised you, one improvement)</li> </ul>"},{"location":"modules/10-capstone/#1-directory-prep","title":"1) Directory prep","text":"<pre><code>mkdir -p ~/de-onramp/capstone/{data,results,logs}\ncp ~/de-onramp/lesson5/data/SRR*.fastq.gz ~/de-onramp/capstone/data/\ncd ~/de-onramp/capstone\nconda activate rnaseq101\n</code></pre>"},{"location":"modules/10-capstone/#2-script-workflow-overview","title":"2) Script workflow overview","text":"<pre><code>graph TD\n    A[Input FASTQ] --&gt; B{Downsample?}\n    B --&gt;|Yes| C[seqtk sample]\n    B --&gt;|No| D[Use original]\n    C --&gt; E[FastQC Analysis]\n    D --&gt; E\n    E --&gt; F[MultiQC Report]\n    F --&gt; G[Calculate Stats]\n    G --&gt; H[Generate Summary]\n    H --&gt; I[Output Files]\n\n    I --&gt; J[fastqc/ directory]\n    I --&gt; K[multiqc_report.html]\n    I --&gt; L[summary.txt]\n\n    style A fill:#e3f2fd\n    style I fill:#e8f5e8\n    style H fill:#fff3e0</code></pre>"},{"location":"modules/10-capstone/#3-script-skeleton-start-here-then-extend","title":"3) Script skeleton (start here, then extend)","text":"<p>Create <code>run_qc.sh</code>:</p> <pre><code>#!/usr/bin/env bash\nset -euo pipefail\n\nusage() {\n  echo \"Usage: $0 -i &lt;in.fastq(.gz)&gt; [-o &lt;outdir&gt;] [-p &lt;fraction&gt;]\"\n  echo \"  -p fraction: optional downsample fraction (0&lt; p &lt;=1), default: 1.0\"\n  exit 1\n}\n\nIN=\"\"; OUT=\"results\"; P=1.0\nwhile getopts \":i:o:p:\" opt; do\n  case $opt in\n    i) IN=\"$OPTARG\";;\n    o) OUT=\"$OPTARG\";;\n    p) P=\"$OPTARG\";;\n    *) usage;;\n  esac\ndone\n[[ -z \"${IN}\" ]] &amp;&amp; usage\n\nmkdir -p \"$OUT\"/{fastqc,logs}\nBASENAME=$(basename \"$IN\" .gz); BASENAME=${BASENAME%.fastq}\nWORK=\"$OUT/${BASENAME}\"\n\n# Downsample (if P&lt;1) to a temp file\nTMP=\"${WORK}.tmp.fastq.gz\"\nif awk \"BEGIN{exit !($P &lt; 1.0)}\"; then\n  seqtk sample -s 1 \"$IN\" \"$P\" | gzip &gt; \"$TMP\"\nelse\n  ln -sf \"$(realpath \"$IN\")\" \"$TMP\"\nfi\n\n# Run FastQC\nfastqc -o \"$OUT/fastqc\" \"$TMP\"\n\n# Aggregate\nmultiqc -o \"$OUT\" \"$OUT/fastqc\" &gt; \"$OUT/logs/multiqc.log\" 2&gt;&amp;1 || true\n\n# Summaries: reads, bases, GC (rough), file size\n# Use gzcat for macOS compatibility\nREADS=$(( (uname -s | grep -q Darwin) &amp;&amp; gzcat \"$TMP\" || zcat \"$TMP\" ) | awk 'END{print NR/4}')\nBASES=$(( (uname -s | grep -q Darwin) &amp;&amp; gzcat \"$TMP\" || zcat \"$TMP\" ) | awk 'NR%4==2{bp+=length($0)} END{print bp+0}')\nGC=$(( (uname -s | grep -q Darwin) &amp;&amp; gzcat \"$TMP\" || zcat \"$TMP\" ) | awk 'NR%4==2{gsub(/[^GgCc]/,\"\");gc+=length($0);t+=length($0)} END{if(t) printf(\"%.2f\",100*gc/t); else print 0}')\nSIZE=$(ls -lh \"$TMP\" | awk '{print $5}')\n\n{\n  echo \"Input: $IN\"\n  echo \"Downsample fraction: $P\"\n  echo \"Tmp file: $TMP (size: $SIZE)\"\n  echo \"Reads: $READS\"\n  echo \"Bases: $BASES\"\n  echo \"GC%: $GC\"\n  echo \"FastQC out: $OUT/fastqc\"\n  echo \"MultiQC report: $OUT/multiqc_report.html\"\n} &gt; \"$OUT/summary.txt\"\n</code></pre> <p>Make it executable:</p> <pre><code>chmod +x run_qc.sh\n</code></pre>"},{"location":"modules/10-capstone/#4-run-it-examples","title":"4) Run it (examples)","text":"<pre><code>./run_qc.sh -i data/SRR.fastq.gz -o results -p 0.05\n# or, if you created SRR.10k.fastq.gz\n./run_qc.sh -i data/SRR.10k.fastq.gz -o results\n</code></pre>"},{"location":"modules/10-capstone/#5-check-outputs","title":"5) Check outputs","text":"<pre><code>cat results/summary.txt\nls -lh results/fastqc\n</code></pre> <p>Open <code>results/multiqc_report.html</code>.</p>"},{"location":"modules/10-capstone/#6-optional-hardening-ideas","title":"6) (Optional) Hardening ideas","text":"<ul> <li>Detect paired-end and run FastQC on both mates.</li> <li>Add <code>-t</code> to FastQC for threads; surface <code>-t</code> as a script arg.</li> <li>Write a CSV/TSV summary for multiple inputs.</li> </ul>"},{"location":"modules/10-capstone/#exit-ticket-email","title":"Exit Ticket (email)","text":"<p>Subject: DE M10 Exit Ticket \u2013  Attach: <ul> <li><code>run_qc.sh</code></li> <li><code>results/summary.txt</code></li> <li>4\u20135 sentence reflection (what you'd change next time)</li> </ul>"}]}